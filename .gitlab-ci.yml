# Using the node alpine image to build the React app
image: node:alpine

# Cache node modules - speeds up future builds
cache:
  paths:
  - node_modules

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  AWS_DEFAULT_REGION: eu-west-1 # The region of our S3 bucket

develop: # build and deploy develop branch to staging
  script:
    - npm install # Install all JS dependencies
    - npm run add-locale en_GB
    - npm run extract # extract latest strings from source into English PO file for localisation
    - apk add --update py-pip && pip install transifex-client # install transifex cli
    - tx push --source --no-interactive # push latest English PO file to transifex for translators
    - tx pull --force --no-interactive # pull all the latest localised PO files from transifex 
    - npm run compile # compile localisation PO files into .js files 
    - REACT_APP_GRAPHQL_ENDPOINT=https://home.next.moodle.net/api/graphql CI=false npm run build --prod # Build for prod, need to specify URL of backend API, and CI=false to avoid failing on warnings
    # - npm run styleguide:build # generate styleguidist docs (deprecated)
    #- npm run docz:build # generate new styleguide
    - rm -rf public # CRA and gitlab pages both use the public folder. Only do this in a build pipeline.
    - mv build public # Move build files to public dir for Gitlab Pages
    - cp public/index.html public/404.html # Not necessary, but helps with https://medium.com/@pshrmn/demystifying-single-page-applications-3068d0555d46
    # Next install the AWS SDK and push files to S3
    - find public/ && pip install awscli && aws s3 sync public/ s3://${STAGING_BUCKET} --delete --exclude .git --exclude README.md --acl public-read
    - aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths '/*' # invalidate CloudFront's cache to serve the new version of the app
    #- aws s3 sync .docz/dist/ s3://${DOCS_STAGING_BUCKET}/docs/styleguide/ --delete --exclude .git --exclude README.md --acl public-read # also copy docs to (a different) S3-served website
    #- aws cloudfront create-invalidation --distribution-id ${DOCS_STAGING_DISTRIBUTION_ID} --paths '/docs/styleguide/*' # invalidate the docs CloudFront's cache to serve the new version
  artifacts:
    paths:
    - public # The built files for Gitlab Pages to serve
  only:
    - develop # Only run on staging branch

master: # build and deploy master branch to production
  script:
    - npm install # Install all JS dependencies
    - npm run extract # extract latest strings from source into English PO file 
    - apk add --update py-pip && pip install transifex-client # install transifex cli
    - tx pull --force --no-interactive # pull all the latest localised PO files from transifex 
    - npm run compile # compile localisation PO files into .js files 
    - REACT_APP_GRAPHQL_ENDPOINT=https://home.moodle.net/api/graphql CI=false npm run build --prod # Build for prod, need to specify URL of backend API, and CI=false to avoid failing on warnings
    - rm -rf public # CRA and gitlab pages both use the public folder. Only do this in a build pipeline.
    - mv build public # Move build files to public dir for Gitlab Pages
    - cp public/index.html public/404.html # Not necessary, but helps with https://medium.com/@pshrmn/demystifying-single-page-applications-3068d0555d46
    - find public/ && pip install awscli && aws s3 sync public/ s3://${PRODUCTION_BUCKET} --delete --exclude .git --exclude README.md --acl public-read
    - aws cloudfront create-invalidation --distribution-id ${PRODUCTION_DISTRIBUTION_ID} --paths '/*'
  artifacts:
    paths:
    - public # The built files for Gitlab Pages to serve
  only:
    - master # Only run on production branch
    
dev-styleguide: # build and deploy develop branch to staging
  script:
    - apk add --update py-pip 
    - pip install awscli 
    - npm install # Install all JS dependencies
    - npm run docz:build # generate new styleguide
    - rm -rf public # CRA and gitlab pages both use the public folder. Only do this in a build pipeline.
    - mv .docz/dist public # in case we want to serve them with gitlab pages
    - mkdir site
    - mkdir site/docs
    - cp -r public website/docs/styleguide
    - mv website/docs/styleguide/static website/ # fix for non-relative path
    - find website/
    # Next install the AWS SDK and push files to S3
    - aws s3 sync website/ s3://${DOCS_STAGING_BUCKET}/ --exclude .git --exclude README.md --acl public-read # also copy docs to (a different) S3-served website
    - aws cloudfront create-invalidation --distribution-id ${DOCS_STAGING_DISTRIBUTION_ID} --paths '/docs/styleguide/*' # invalidate the docs CloudFront's cache to serve the new version
  artifacts:
    paths:
    - public # The built files for Gitlab Pages to serve
  only:
    - dev-styleguide # Only run on staging branch
