# Using the node alpine image to build the React app
image: node:alpine

# Cache node modules - speeds up future builds
cache:
  paths:
  - node_modules

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  AWS_DEFAULT_REGION: eu-west-1 # The region of our S3 bucket

default:
  before_script:
    - apk add --update py-pip # install python & pip
    - pip install awscli 
    - npm install # Install all JS dependencies
    - npm run add-locale en_GB # make sure we have default language
    - npm run extract # extract latest strings from source into English PO file for localisation

deploy-next: # build and deploy develop branch to staging
  only:
    - develop # Only run on staging branch
  script:
    - if [ ! -z "$TX_TOKEN" ]; then pip install transifex-client && tx push --source --no-interactive && tx pull --force --no-interactive ; else echo "Skipping..."; fi # install transifex cli, then push latest English PO file to transifex for translators, and finally pull all the latest localised PO files from transifex to be used by frontend
    - npm run compile # compile localisation PO files into .js files 
    - REACT_APP_GRAPHQL_ENDPOINT=https://home.next.moodle.net/api/graphql CI=false npm run build --prod # Build for prod, need to specify URL of backend API, and CI=false to avoid failing on warnings
    # - npm run styleguide:build # generate styleguide docs 
    - rm -rf public # CRA and gitlab pages both use the public folder. Only do this in a build pipeline.
    - mv build public # Move build files to public dir for Gitlab Pages
    - cp public/index.html public/404.html # Not necessary, but helps with https://medium.com/@pshrmn/demystifying-single-page-applications-3068d0555d46
    # Next install the AWS SDK and push files to S3
    - if [ ! -z "$STAGING_BUCKET" ]; then aws s3 sync public/ s3://${STAGING_BUCKET} --delete --exclude .git --exclude README.md --acl public-read ; else echo "Skipping..."; fi # deploy frontend to staging
    - if [ ! -z "$STAGING_DISTRIBUTION_ID" ]; then aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths '/*' ; else echo "Skipping..."; fi # invalidate CloudFront's cache to serve the new version
    #- aws s3 sync styleguide/ s3://${DOCS_STAGING_BUCKET}/docs/styleguide/ --delete --exclude .git --exclude README.md --acl public-read # also copy docs to (a different) S3-served website
    #- aws cloudfront create-invalidation --distribution-id ${DOCS_STAGING_DISTRIBUTION_ID} --paths '/docs/styleguide/*' # invalidate the docs CloudFront's cache to serve the new version
  artifacts:
    paths:
    - public # The built files for Gitlab Pages to serve


deploy-prod: # build and deploy master branch to production
  only:
    - master # Only run on production branch
  script:
    - if [ ! -z "$TX_TOKEN" ]; then pip install transifex-client && tx pull --force --no-interactive ; else echo "Skipping..."; fi # install transifex cli, then pull all the latest localised PO files from transifex 
    - npm run compile # compile localisation PO files into .js files 
    - REACT_APP_GRAPHQL_ENDPOINT=https://home.moodle.net/api/graphql CI=false npm run build --prod # Build for prod, need to specify URL of backend API, and CI=false to avoid failing on warnings
    - rm -rf public # CRA and gitlab pages both use the public folder. Only do this in a build pipeline.
    - mv build public # Move build files to public dir for Gitlab Pages
    - cp public/index.html public/404.html # Not necessary, but helps with https://medium.com/@pshrmn/demystifying-single-page-applications-3068d0555d46
    - if [ ! -z "$PRODUCTION_BUCKET" ]; then aws s3 sync public/ s3://${PRODUCTION_BUCKET} --delete --exclude .git --exclude README.md --acl public-read ; else echo "Skipping..."; fi # deploy frontend to prod
    - if [ ! -z "$PRODUCTION_DISTRIBUTION_ID" ]; then aws cloudfront create-invalidation --distribution-id ${PRODUCTION_DISTRIBUTION_ID} --paths '/*' ; else echo "Skipping..."; fi # invalidate CloudFront's cache to serve the new version
  artifacts:
    paths:
    - public # The built files for Gitlab Pages to serve
  
  
deploy-team: # build and deploy master branch to production
  only:
    - develop # Only run on staging branch
  script:
    - if [ ! -z "$TX_TOKEN" ]; then pip install transifex-client && tx pull --force --no-interactive ; else echo "Skipping..."; fi # install transifex cli, then pull all the latest localised PO files from transifex 
    - npm run compile # compile localisation PO files into .js files 
    - REACT_APP_GRAPHQL_ENDPOINT=https://team.moodle.net/api/graphql CI=false npm run build --prod # Build for prod, need to specify URL of backend API, and CI=false to avoid failing on warnings
    - rm -rf public # CRA and gitlab pages both use the public folder. Only do this in a build pipeline.
    - mv build public # Move build files to public dir for Gitlab Pages
    - cp public/index.html public/404.html # Not necessary, but helps with https://medium.com/@pshrmn/demystifying-single-page-applications-3068d0555d46
    - if [ ! -z "$TEAM_BUCKET" ]; then aws s3 sync public/ s3://${TEAM_BUCKET} --delete --exclude .git --exclude README.md --acl public-read ; else echo "Skipping..."; fi # deploy frontend to prod
    - if [ ! -z "$TEAM_DISTRIBUTION_ID" ]; then aws cloudfront create-invalidation --distribution-id ${TEAM_DISTRIBUTION_ID} --paths '/*' ; else echo "Skipping..."; fi # invalidate CloudFront's cache to serve the new version
  artifacts:
    paths:
    - public # The built files for Gitlab Pages to serve
  
