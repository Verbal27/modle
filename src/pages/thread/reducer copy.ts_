import { Reducer } from 'redux'
import { gqlResponse } from '../../gql/actions'
import { GET_THREAD_REPLY, Data } from './types'
import { replyThread } from './actions'

const initialState: State = {
  thread: {
    loading: true
  }
}
export const reducer: Reducer<State> = (old = initialState, action) => {
  return old
}

export const threadReducer: Reducer<State['thread']> = (old = initialState.thread, action) => {
  if (gqlResponse.is(action) && action.payload.replyTo === GET_THREAD_REPLY && action.payload.resp.getThread) {
    const resp = action.payload.resp.getThread
    return {
      thread: {
        ...resp,
        loading: false
      }
    }
  } else if (
    replyThread.is(action) &&
    !old.loading &&
    !old.error &&
    old.data.comment &&
    old.data.comment.replies &&
    old.data.comment.replies.edges
  ) {
    const replies = old.data.comment.replies
    const edges = replies.edges
    const next: State['thread'] = {
      ...old,
      data: {
        comment: {
          ...old.data.comment,
          replies: {
            totalCount: replies.totalCount + 1,
            edges: [
              ...edges,
              {
                node: {
                  content: action.payload.text,
                  author: {} as any,
                  replies: { totalCount: 0, edges: [] },
                  inReplyTo: { author: {} as any }
                }
              }
            ]
          }
        }
      }
    }
    return next
  }
  return old
}

export interface State {
  thread: Data
}
